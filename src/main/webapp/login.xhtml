<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:p="http://primefaces.org/ui"
	xmlns:c="http://java.sun.com/jsp/jstl/core"
	xmlns:jsf="http://xmlns.jcp.org/jsf"
	xmlns:ui="http://java.sun.com/jsf/facelets"
    template="/WEB-INF/template/layout_login.xhtml">
    
    <ui:define name="title">
		#{msg['application.title']} - #{msg['login']}
	</ui:define>
	
	<ui:define name="content">
		  
  		<!-- Login div -->
  		<div id="loginDiv" class="w3-display-middle">

			<div class="w3-card-4 w3-white w3-animate-zoom" style="width:450px;max-width: 98vw;">
			
				<header class="w3-container w3-padding-16 w3-center">
					<span class="w3-xlarge" style="font-weight:700"><i class="pi pi-lock w3-xlarge"/> #{msg['login.to']} <h:outputLink value="#{request.contextPath}" style="color:inherit">#{msg['application.title']}</h:outputLink></span>
				</header>

				<div class="w3-center w3-margin-top" jsf:rendered="#{param.logout_success != null}">
					<p:staticMessage severity="info" summary="#{msg['INFO']}" detail="#{msg['successfully.logged.out']}"/>
				</div>
				<div class="w3-center w3-margin-top" jsf:rendered="#{param.login_error != null and SPRING_SECURITY_LAST_EXCEPTION != null}">
					 <p:staticMessage severity="error" summary="#{msg['ERROR']}" detail="#{msg['login.failed.please.try.again']}"/>
				</div>
    			
    			<form action="#{request.contextPath}/login" method="post" class="w3-container">
    				<div class="w3-center">
	    				<div class="w3-section">
	    					<input type="text" name="username" placeholder="&#xe939; #{msg['enter.username']}" class="w3-input w3-border w3-round" style="font-family: Helvetica, Arial, sans-serif, PrimeIcons;text-align:center;" />
	    				</div>
	    				<div class="w3-section">
	    					<input type="password" name="password" placeholder="&#xe981; #{msg['enter.password']}" class="w3-input w3-border w3-round" style="font-family: Helvetica, Arial, sans-serif, PrimeIcons;text-align:center;" />
	    				</div>
	    				<div class="w3-section">
	    					<input type="checkbox" name="#{applicationProperties['RememberMe.requestParameter']}" id="#{applicationProperties['RememberMe.requestParameter']}" class="w3-check"/> #{msg['remember.me']}
	    				</div>
	    				<div class="w3-section">
	    					<button type="submit" class="w3-input w3-btn w3-round w3-theme-dark"><i class="pi pi-sign-in"/> #{msg['login']}</button>
	    				</div>
    				</div>
    			</form>
			
			    <div class="w3-container w3-padding-16 w3-theme-l4">
			      	<span class="w3-left">#{msg['no.account']}? <a href="#" onclick="toggleMiddleDivs('registerDiv'); return false;">#{msg['register']}</a></span>
			      	<span class="w3-right">#{msg['forgot.password']} <a href="#" onclick="toggleMiddleDivs('passwordResetDiv'); return false;">#{msg['reset']}</a></span>
			    </div>
	
	 		</div>

		</div>	
		
		<!-- Register div -->
		<div id="registerDiv" class="w3-display-middle" style="display: none;">
			
			<div class="w3-card-4 w3-white w3-animate-zoom" style="width:450px;">
		
				<header class="w3-container w3-padding w3-center">
					<span class="w3-xlarge" style="font-weight:700"><i class="pi pi-book w3-xlarge"/> #{msg['register.account']}</span>
				</header>
						
				<h:form styleClass="w3-container" id="registerForm">
				
					<div jsf:rendered="#{!publicBackingBean.registrationSuccess and not empty publicBackingBean.registrationMessages}" class="w3-pale-red w3-section w3-round">
						<h4>#{msg['unable.to.create.account']}</h4>
						<ul jsfc="ui:repeat" var="message" value="#{publicBackingBean.registrationMessages}">
							<li>#{message}</li>
						</ul>
						
					</div>
					
					<div jsf:rendered="#{publicBackingBean.registrationSuccess}" class="w3-pale-green w3-section w3-round w3-center">
					
						<div jsf:rendered="#{publicBackingBean.emailSent}">
							<h4>Email has been sent to #{publicBackingBean.user.person.email}</h4>
							<h6>Please find the email and activate your account</h6>
						</div>
						<div jsf:rendered="#{not publicBackingBean.emailSent}">
							<h4>Your account has been created</h4>
							<a href="#" onclick="toggleMiddleDivs('loginDiv');return false;">Click here to login</a>
						</div>
														
					</div>						
				
					<div jsf:rendered="#{!publicBackingBean.registrationSuccess}" class="w3-center">
						<div class="w3-section">
							<p:inputText id="username" value="#{publicBackingBean.user.username}" placeholder="&#xe939; #{msg['pick.a.username']}" styleClass="w3-input" title="#{msg['username']}"
								style="font-family: Helvetica, Arial, sans-serif, PrimeIcons;text-align:center;"
								onblur="validateRegisterUsername();" onfocus="this.className = this.className.replace(/(^|\s)w3-border-\S+/gi, '');"
								validatorMessage="#{msg['username.must.be']}">
								<f:validateRegex pattern="^[a-zA-Z0-9]{5,30}$"/>
							</p:inputText>
							<h:message for="username" id="usernameMessage" errorClass="w3-text-red" infoClass="w3-text-green"/>
						</div>
						<div class="w3-section">
							<p:inputText id="email" value="#{publicBackingBean.user.person.email}" placeholder="@ #{msg['enter.email']}" styleClass="w3-input w3-margin-top" title="#{msg['email']}"
								style="font-family: Helvetica, Arial, sans-serif, PrimeIcons;text-align:center;"
								onblur="validEmail = validateEmail(this);" onfocus="this.className = this.className.replace(/(^|\s)w3-border-\S+/gi, '');">
							</p:inputText>
							<h:message for="email" id="emailMessage" errorClass="w3-text-red" infoClass="w3-text-green"/>
						</div>
						<div class="w3-section">
							<p:inputText id="firstName" value="#{publicBackingBean.user.person.firstName}" placeholder="&#xe9aa; #{msg['first.name']}" styleClass="w3-input" 
								title="#{msg['first.name']}" style="font-family: Helvetica, Arial, sans-serif, PrimeIcons;text-align:center;" 
								maxlength="30" validatorMessage="#{msg['first.name.cant.exceed.30']}">
								<f:validateLength maximum="30"/>
							</p:inputText>
							<h:message for="firstName" id="firstNameMessage" errorClass="w3-text-red" infoClass="w3-text-green"/>
						</div>
						<div class="w3-section">
							<p:inputText id="lastName" value="#{publicBackingBean.user.person.lastName}" placeholder="&#xe9aa; #{msg['last.name']}" styleClass="w3-input" 
								title="#{msg['last.name']}" style="font-family: Helvetica, Arial, sans-serif, PrimeIcons;text-align:center;"
								maxlength="30" validatorMessage="#{msg['last.name.cant.exceed.30']}">
								<f:validateLength maximum="30"/>
							</p:inputText>
							<h:message for="lastName" id="lastNameMessage" errorClass="w3-text-red" infoClass="w3-text-green"/>					
						</div>
						<div class="w3-section">
							<p:password id="password" value="#{publicBackingBean.user.password}" placeholder="&#xe981; #{msg['choose.a.password']}" styleClass="w3-input" title="#{msg['password']}" 
								style="font-family: Helvetica, Arial, sans-serif, PrimeIcons;text-align:center;" toggleMask="true" validatorMessage="#{msg['password.must.be']}"
								onblur="validateRegisterPassword();" onfocus="this.className = this.className.replace(/(^|\s)w3-border-\S+/gi, '');">
								<f:validateLength minimum="5" maximum="16"/>
							</p:password>
							<h:message for="password" id="passwordMessage" errorClass="w3-text-red" infoClass="w3-text-green"/>
						</div>
						<div class="w3-section">
							<p:password id="confirmPassword" placeholder="&#xe981; #{msg['confirm.password']}" styleClass="w3-input" title="#{msg['confirm.password']}" 
								style="font-family: Helvetica, Arial, sans-serif, PrimeIcons;text-align:center;" toggleMask="true" 
								match="password" validatorMessage="#{msg['confirm.password.not.matched']}"
								onblur="validateConfirmPassword();" onfocus="this.className = this.className.replace(/(^|\s)w3-border-\S+/gi, '');">
							</p:password>
							<h:message for="confirmPassword" id="confirmPasswordMessage" errorClass="w3-text-red" infoClass="w3-text-green"/>									
						</div>
						
						<div jsf:rendered="#{publicBackingBean.registrationOption.enableCaptcha}" style="text-align: right;display: flex;" class="w3-section">
							<p:inputText id="captchaInput" placeholder="#{msg['enter.captcha']} &#xe920;" title="#{msg['captcha']}" 
								style="font-family: Helvetica, Arial, sans-serif, PrimeIcons;text-align:center;flex-grow:1" >
								<f:validator validatorId="captchaValidator"/>
							</p:inputText>
							
							<h:graphicImage value="data:image/png;base64,#{captchaImage.randomCaptchaBase64}" id="captchaImage" style="margin-left:8px;border-radius:4px;"/>
							
							<!-- 
								note: it's important to have process="@this" and partialSubmit="true", meaning only process this component (button).
								this would avoid the whole form submit (and the form input validation on the server side):
								
								https://stackoverflow.com/questions/25339056/understanding-primefaces-process-update-and-jsf-fajax-execute-render-attributes
							-->
				  			<p:commandButton update="registerForm:captchaImage" process="@this" partialSubmit="true"
				  				icon="pi pi-refresh" ajax="true" style="margin-left:8px;" styleClass="w3-input w3-btn w3-theme-dark" title="#{msg['refresh.captcha']}"/>
						</div>
						<div>
							<h:message for="captchaInput" id="captchaInputMessage" errorClass="w3-text-red" infoClass="w3-text-green"/>
						</div>

						<div class="w3-section">
							<p:commandButton ajax="true" styleClass="w3-input w3-btn w3-round w3-theme-dark" value="&#xe909; #{msg['submit']}" 
								id="submitButton" style="font-family:Arial, PrimeIcons;" action="#{publicBackingBean.register}" update=":registerForm"/>
						</div>
					</div>
				</h:form>
				
			    <div class="w3-container w3-padding-16 w3-theme-l4 w3-center">
			      
			      <span class="w3-left">
			      	#{msg['already.registered']}? <a href="#" onclick="toggleMiddleDivs('loginDiv');return false;">#{msg['login']}</a>
			      </span>
			      <span class="w3-right">
			      	<a href="#{request.contextPath}">#{msg['application.title']} #{msg['home']}</a>
			      </span>
			      
			    </div>
				
			</div>
		</div>
		
		<!-- Forgot Password div -->
		<div id="passwordResetDiv" class="w3-display-middle" style="display:none">
			<div class="w3-card-4 w3-white w3-animate-zoom" style="width:450px;max-width: 98vw;">
			
				<header class="w3-container w3-padding w3-center">
					<span class="w3-xlarge" style="font-weight:700"><i class="pi pi-refresh w3-xlarge"/> #{msg['reset.your.password']}</span>
				</header>				

				<h:form styleClass="w3-container" id="passwordResetForm">
					
					<div jsf:rendered="#{publicBackingBean.passwordResetEmailSent}" class="w3-pale-green w3-section w3-round w3-center">
						<h4>#{msg['password.reset.email.sent']}</h4>
						<h6>#{msg['please.check.email.for.password.reset.instruction']}</h6>
					</div>
					
					<div jsf:rendered="#{not publicBackingBean.passwordResetEmailSent and not empty publicBackingBean.passwordResetMessages}" class="w3-pale-red w3-section w3-round">
						<h4>#{msg['unable.to.complete.request']}:</h4>
						<ul jsfc="ui:repeat" var="message" value="#{publicBackingBean.passwordResetMessages}" style="list-style-position: inside; padding-left: 0;">
							<li>#{message}</li>
						</ul>
					</div>						

					<div jsf:rendered="#{not publicBackingBean.passwordResetEmailSent}" class="w3-section w3-center">
						
						<h6>#{msg['enter.email.to.get.password.reset.link']}</h6>
						
						<div class="w3-section">
							<p:inputText id="passwordResetEmail" value="#{publicBackingBean.passwordResetEmail}" placeholder="@ #{msg['enter.email']}" styleClass="w3-input w3-margin-top" title="#{msg['email']}"
								style="text-align:center;"
								onblur="validPasswordResetEmail = validateEmail(this);" onfocus="this.className = this.className.replace(/(^|\s)w3-border-\S+/gi, '');">
							</p:inputText>
							<h:message for="passwordResetEmail" id="passwordResetEmailMessage" errorClass="w3-text-red" infoClass="w3-text-green"/>
						</div>
						<div class="w3-section">
							<p:commandButton ajax="true" styleClass="w3-input w3-btn w3-theme-dark" value="&#xe909; #{msg['submit']}" style="font-family: Helvetica, Arial, sans-serif, PrimeIcons"
								id="resetPasswordSubmitButton" action="#{publicBackingBean.resetPassword}" update=":passwordResetForm"/>
						</div>
					</div>
					
				</h:form>
				
				<div class="w3-container w3-padding-16 w3-theme-l4">
			      	<span class="w3-left"><a href="#" onclick="toggleMiddleDivs('loginDiv'); return false;">#{msg['login']}</a></span>
			      	<span class="w3-right"><a href="#{request.contextPath}">#{msg['application.title']} #{msg['home']}</a></span>
			    </div>
			</div>
		</div>
		
		<script>
			//<![CDATA[
			 
			validPasswordResetEmail = false;	
			
			/*
			 *
			 */
			validPassword = false;
			validConfirmPassword = false;
			validEmail = false;
			validUsername = false;
			
			function validateRegisterUsername() {
				
				// https://stackoverflow.com/questions/15933727/javascript-regular-expression-for-usernames-no-spaces
				var userNameRegex = /^[a-zA-Z0-9]{5,30}$/;
				
				var usernameEl = document.getElementById('registerForm:username');
				var username = usernameEl.value;
				
				// reset styling
				usernameEl.className = usernameEl.className.replace(/(^|\s)w3-border-\S+/gi, "");
				
				if(!userNameRegex.test(username)) {
					validUsername = false;
					usernameEl.className += " w3-border-orange";
					usernameEl.title = "#{msg['username.must.be']}"
				}
				else {
					validUsername = true;
					usernameEl.className += " w3-border-light-green";
					usernameEl.title = "#{msg['username']}"
				}
			}

			function validateEmail(emailEl) {
				
				var isValid = false;
				
				// the following email regular expression is taken from the most voted answer in stackoverflow at:
				// https://stackoverflow.com/questions/46155/how-to-validate-an-email-address-in-javascript
				var emailRegex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
				
				//var emailEl = document.getElementById('registerForm:email');
				var email = emailEl.value;
				
				// reset styling
				emailEl.className = emailEl.className.replace(/(^|\s)w3-border-\S+/gi, "");
				
				if(!emailRegex.test(String(email).toLowerCase())) {
					isValid = false;
					emailEl.className += " w3-border-orange";
					emailEl.title = "#{msg['invalid.email.format']}"
				}
				else {
					isValid = true;
					emailEl.className += " w3-border-light-green";
					emailEl.title = "#{msg['email']}"
				}
				
				return isValid;
			}
			
			function validateRegisterPassword() {
				
				var passwordEl = document.getElementById('registerForm:password');
				var password = passwordEl.value;
				
				// reset styling
				passwordEl.className = passwordEl.className.replace(/(^|\s)w3-border-\S+/gi, "");
				
				if(password.length < 5 || password.length > 16) {
					validPassword = false;
					passwordEl.className += " w3-border-orange";
					passwordEl.title = "#{msg['password.must.be']}"
				}
				else {
					validPassword = true;
					passwordEl.className += " w3-border-light-green";
					passwordEl.title = "#{msg['password']}"
				}
			}
			
			function validateConfirmPassword() {
				
				var passwordEl = document.getElementById('registerForm:password');
				var password = passwordEl.value;
				
				var confirmPasswordEl = document.getElementById('registerForm:confirmPassword');
				var confirmPassword = confirmPasswordEl.value;
				
				// reset styling
				confirmPasswordEl.className = confirmPasswordEl.className.replace(/(^|\s)w3-border-\S+/gi, "");
				
				if(password != confirmPassword) {
					validConfirmPassword = false;
					confirmPasswordEl.className += " w3-border-orange";
					confirmPasswordEl.title="#{msg['confirm.password.does.not.match.password']}"
				}
				else {
					validConfirmPassword = true;
					confirmPasswordEl.className += " w3-border-light-green";
					confirmPasswordEl.title="#{msg['confirm.password']}"
				}
			}
			
			/*
			 * Note: 04/10/2022: remove the use JS client side validation for now
			 *  validateRegistration() are now not used
			 */ 
			function validateRegistration() {
				
				if(!validUsername) {
					var usernameEl = document.getElementById('registerForm:username');
					var messageEl = document.getElementById('registerForm:usernameMessage');
					messageEl.innerHTML = usernameEl.title;
					messageEl.className += " w3-text-orange";
				}
				if(!validEmail) {
					var emailEl = document.getElementById('registerForm:email');
					var messageEl = document.getElementById('registerForm:emailMessage');
					messageEl.innerHTML = emailEl.title;
					messageEl.className += " w3-text-orange";
				}
				if(!validPassword) {
					var passwordEl = document.getElementById('registerForm:password');
					var messageEl = document.getElementById('registerForm:passwordMessage'); 
					messageEl.innerHTML = passwordEl.title; 
					messageEl.className += " w3-text-orange";
				}
				if(!validConfirmPassword) {
					var confirmPasswordEl = document.getElementById('registerForm:confirmPassword');
					var messageEl = document.getElementById('registerForm:confirmPasswordMessage');
					messageEl.innerHTML = confirmPasswordEl.title; 
					messageEl.className += " w3-text-orange";
				}
				
				return validUsername && validEmail && validPassword && validConfirmPassword;
			}
			
			// ---
			function toggleMiddleDivs(divId) {
				
				$(".w3-display-middle").hide();
				$("#" + divId).show();
			}
			
			//]]>
		</script>
	
	</ui:define>
	
</ui:composition>